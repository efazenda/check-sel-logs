#-------------------------------------------------------------------------------------#
# Make inclusion file providing the basic framework for building a Python sensor      #
# Copyright (C) 2011  project-lemon@cern.ch (CERN)                                    #
#-------------------------------------------------------------------------------------#

SHELL      = /bin/sh
PYTHON     = $(shell which python)

# rpm variables
rpmbuild   = $(shell [ -x /usr/bin/rpmbuild ] && echo rpmbuild || echo rpm)
rpmtopdir := $(shell rpm --eval %_topdir)

#
# package information
#
SPECFILE   = $(shell find . -maxdepth 1 -type f -name '*.spec')
PACKAGE    = $(shell awk '$$1 == "Name:"     { print $$2 }' $(SPECFILE) )
VERSION    = $(shell awk '$$1 == "Version:"  { print $$2 }' $(SPECFILE) )
RELEASE    = $(shell awk '$$1 == "Release:"  { print $$2 }' $(SPECFILE) )
SENSORNAME = $(shell echo $(PACKAGE) | sed -e s/^lemon-//)
TARNAME    = $(PACKAGE)-$(VERSION).tar.gz

#
# installation directories
#
libexecdir = $(prefix)/usr/libexec
sysconfdir = $(prefix)/etc
datadir    = $(prefix)/usr/share/doc/

.PHONY: docs

#
# targets
#

all: configure


# Clean up the build environment
#   - this removes all files generated by input files
#
clean:
	@rm -rf   $(TARNAME)
	@rm -rf   $(PACKAGE)-$(VERSION)
	@rm -f    `find . -name '*~'` 
	@rm -f    `find . -name '#*'`
	@rm -f    `find . -name 'core.*'`
	@for i in `find . -type f -name '*.in' | sed -e s/.in$$// | sort -u` ; do \
		rm -f $$i; \
	done


# aliased to clean
distclean: clean


# Configure the project bu auto generating all input files
#   - we make modifications to .in files here!
#
configure: clean docs
	@for i in `find . -type f -name '*.in' | sort -u` ; do \
		cat $$i | \
		sed -e s/@PACKAGE@/$(PACKAGE)/g -e s/@VERSION@/$(VERSION)/g \
		    -e s/@RELEASE@/$(RELEASE)/g > `echo $$i | sed -e s/.in$$//`; \
	done


# Tag the project using the version information from the spec file
#   - this target tags all the files that are included in the source distribution 
#     tarball. If the files haven't been previously committed to CVS then the tagging
#     will fail!
#
cvstag: dist
	@echo CVS tagging $(PACKAGE) for release $(VERSION)-$(RELEASE)
	@echo cvs tag -F -l -c v$(subst .,_,$(VERSION).$(RELEASE)) \
	     $(shell tar -ztvf $(TARNAME) | sed -e "s/$(PACKAGE)-$(VERSION)\///" | \
	     grep '^-'| awk '{ print $$6 }')
	@rm -f $(TARNAME)


# Build a distribution tarball
#   - exclude all backup, core files and CVS sub directories
#
dist: clean
	@echo Building $(PACKAGE) source distribution

        # create directories
	@mkdir -p $(PACKAGE)-$(VERSION)
	@for i in `find . -mindepth 1 -type d ! -regex '.*CVS.*' -a ! -regex '.*lemon-.*' | \
		   sed -e "s/^\./\.\/$(PACKAGE)-$(VERSION)/"`; do \
		mkdir -p $$i; \
	done

        # copy files
	@for i in `find -type f ! -regex '.*CVS.*' | sed -e "s/^\.\///"`; do \
		cp ./$$i $(PACKAGE)-$(VERSION)/$$i; \
	done

        # create tarball
	@tar -zcf  $(TARNAME) $(PACKAGE)-$(VERSION)
	@rm -rf    $(PACKAGE)-$(VERSION)

	@echo Distribution tarball ./$(TARNAME) created

# For koji
sources: dist


#
# Install the software into the directory specified by prefix
#
install: clean configure docs
	@echo Installing $(PACKAGE) to directory: $(prefix)

        # python modules
        #   - create the directories and sub directories along the way
        #
	@for i in `find ./src/ -maxdepth 1 -type f -name '*.py'`; do \
		mkdir -p $(libexecdir)/sensors/; \
		install -m 644 $$i $(libexecdir)/sensors/; \
	done

	@for i in `find ./src/ -mindepth 2 -type f -name '*.py'  | sed -e "s/^\.\/src\///"`; do \
		mkdir -p $(libexecdir)/sensors/lib/`dirname $$i`/; \
		install -m 644 ./src/$$i $(libexecdir)/sensors/lib/`dirname $$i`/; \
	done

        # json definition files
	@for i in `find ./src/ -maxdepth 1 -type f -name '*.json'`; do \
		mkdir -p $(libexecdir)/sensors/; \
		install -m 644 $$i $(libexecdir)/sensors/; \
	done

	@for i in `find ./src/ -mindepth 2 -type f -name '*.json'  | sed -e "s/^\.\/src\///"`; do \
		mkdir -p $(libexecdir)/sensors/lib/`dirname $$i`/; \
		install -m 644 ./src/$$i $(libexecdir)/sensors/lib/`dirname $$i`/; \
	done

        # documentation
	@mkdir -p $(datadir)/$(PACKAGE)-$(VERSION)
	@cp    -f AUTHORS COPYING ChangeLog $(datadir)/$(PACKAGE)-$(VERSION)

	@for i in `find ./docs/ -type f -name '*.html' | sed -e "s/^\.\/docs\///"`; do \
		install -m 644 ./docs/$$i $(datadir)/$(PACKAGE)-$(VERSION)/; \
	done

	@echo Installation complete


# Build SRPMS and RPM files for this project
#   - in order to satisfy the build needs of the Etics project rpmtopdir must be 
#     specified during the build process
#
rpm: dist
	@echo Building RPM in directory $(rpmtopdir)

        # create the rpmbuild directories
	@for i in BUILD RPMS SOURCES SPECS SRPMS; do \
		mkdir -p $(rpmtopdir)/$$i; \
	done

	cp -f 	$(TARNAME)	$(rpmtopdir)/SOURCES/
	cp -f 	$(SPECFILE)	$(rpmtopdir)/SPECS/
	rm -f 	$(TARNAME)

	@if [ `uname -a | egrep -c el6` -gt 0 ]; then \
		$(rpmbuild) --define '_topdir    $(rpmtopdir)'          \
			     --define '_specdir   $(rpmtopdir)/SPECS/'   \
			     --define '_sourcedir $(rpmtopdir)/SOURCES/' \
			     --define '_srcrpmdir $(rpmtopdir)/SRPMS/'   \
			     --define '_rpmdir    $(rpmtopdir)/RPMS/'    \
			     --define '_buildroot $(rpmtopdir)/BUILD/'   \
			     --define '_tmppath   $(rpmtopdir)/BUILD/'   \
			     -ba $(rpmtopdir)/SPECS/$(SPECFILE); \
	elif [ `uname -a | egrep -c el5` -gt 0 ]; then \
		$(rpmbuild) --define '_topdir    $(rpmtopdir)'          \
			     --define '_specdir   $(rpmtopdir)/SPECS/'   \
			     --define '_sourcedir $(rpmtopdir)/SOURCES/' \
			     --define '_srcrpmdir $(rpmtopdir)/SRPMS/'   \
			     --define '_rpmdir    $(rpmtopdir)/RPMS/'    \
			     --define '_buildroot $(rpmtopdir)/BUILD/'   \
			     --define '_tmppath   $(rpmtopdir)/BUILD/'   \
			     --define 'dist .el5'                        \
			     --define 'el5 1'                            \
			     -ba $(rpmtopdir)/SPECS/$(SPECFILE); \
	fi


#-- End-of-File ----------------------------------------------------------------------#
